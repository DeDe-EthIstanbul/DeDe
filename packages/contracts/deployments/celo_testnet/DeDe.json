{
  "address": "0x4f361a3b293130E1c13A7B780eb49764a6F7B7DB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_settlementDuration",
          "type": "uint256"
        },
        {
          "internalType": "contract IEAS",
          "name": "_eas",
          "type": "address"
        },
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "contract IPUSHCommInterface",
          "name": "_push",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEAS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "courier",
          "type": "address"
        }
      ],
      "name": "ShipmentCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "courier",
          "type": "address"
        }
      ],
      "name": "ShipmentDelivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "courier",
          "type": "address"
        }
      ],
      "name": "ShipmentPickedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipmentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        }
      ],
      "name": "ShipmentRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "UserVerifiedWithWorldCoin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPLETED_SCHEMA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELIVERED_SCHEMA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISPUTED_SCHEMA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PICKED_UP_SCHEMA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        }
      ],
      "name": "completeShipment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        }
      ],
      "name": "deliverShipment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deliveryIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        }
      ],
      "name": "disburse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        }
      ],
      "name": "dispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fulfilledShipments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPayable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiAttest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "attestations",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "multiRevoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pickedUpShipments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "requestShipment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schema",
          "type": "bytes32"
        }
      ],
      "name": "setCompletedSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schema",
          "type": "bytes32"
        }
      ],
      "name": "setDeliveredSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schema",
          "type": "bytes32"
        }
      ],
      "name": "setDisputedSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_schema",
          "type": "bytes32"
        }
      ],
      "name": "setPickedUpSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shipmentId",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shipments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "enum DeDe.ShipmentState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settlementDeadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "courier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyWithWorldCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9969f29a3c8adf217db3864617dbe9c635c60e1cd23a430970ebb819b765da75",
  "receipt": {
    "to": null,
    "from": "0x888880D76B08Ee18A853bfA503f83ac558b108dc",
    "contractAddress": "0x4f361a3b293130E1c13A7B780eb49764a6F7B7DB",
    "transactionIndex": 0,
    "gasUsed": "2078017",
    "logsBloom": "0x
    "blockHash": "0x923c5868a2e492847b7fbfb31407ab9910a9b83db01e380d5ecd9155b8803bd2",
    "transactionHash": "0x9969f29a3c8adf217db3864617dbe9c635c60e1cd23a430970ebb819b765da75",
    "logs": [],
    "blockNumber": 20994192,
    "cumulativeGasUsed": "2078017",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    "0x0000000000000000000000000000000000000001",
    "0x0000000000000000000000000000000000000001",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "26a93357e7e12f650a856b02d8374ed2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlementDuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IEAS\",\"name\":\"_eas\",\"type\":\"address\"},{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"contract IPUSHCommInterface\",\"name\":\"_push\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"courier\",\"type\":\"address\"}],\"name\":\"ShipmentCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"courier\",\"type\":\"address\"}],\"name\":\"ShipmentDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"courier\",\"type\":\"address\"}],\"name\":\"ShipmentPickedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipmentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"ShipmentRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserVerifiedWithWorldCoin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPLETED_SCHEMA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELIVERED_SCHEMA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISPUTED_SCHEMA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PICKED_UP_SCHEMA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"}],\"name\":\"completeShipment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"}],\"name\":\"deliverShipment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deliveryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"}],\"name\":\"disburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fulfilledShipments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pickedUpShipments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"requestShipment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schema\",\"type\":\"bytes32\"}],\"name\":\"setCompletedSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schema\",\"type\":\"bytes32\"}],\"name\":\"setDeliveredSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schema\",\"type\":\"bytes32\"}],\"name\":\"setDisputedSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_schema\",\"type\":\"bytes32\"}],\"name\":\"setPickedUpSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shipmentId\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shipments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum DeDe.ShipmentState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"courier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyWithWorldCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"completeShipment(uint256)\":{\"details\":\"Complete a shipment. Only the reciever can call this. Resolved by EAS.\",\"params\":{\"_shipmentId\":\"ID of the shipment\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_eas\":\"Address of the EAS contract\",\"_settlementDuration\":\"How long the courier has to complete the shipment\"}},\"deliverShipment(uint256)\":{\"details\":\"Deliver a shipment. Only the courier can call this. Resolved by EAS.\",\"params\":{\"_shipmentId\":\"ID of the shipment\"}},\"isPayable()\":{\"returns\":{\"_0\":\"Whether the resolver supports ETH transfers.\"}},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"requestShipment(address)\":{\"details\":\"Request a shipment. Direct Contract Attestation\",\"params\":{\"receiver\":\"receiver of the shipment\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"verifyWithWorldCoin(address,uint256,uint256,uint256[8])\":{\"details\":\"Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\",\"params\":{\"nullifierHash\":\"The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\",\"proof\":\"The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\",\"root\":\"The root of the Merkle tree (returned by the JS widget).\",\"signal\":\"An arbitrary input from the user, usually the user's wallet address (check README for further details)\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidNullifier()\":[{\"notice\":\"Thrown when attempting to reuse a nullifier\"}]},\"events\":{\"UserVerifiedWithWorldCoin(address)\":{\"notice\":\"Event emitted when a user is verified with World ID\"}},\"kind\":\"user\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation and verifies whether it's valid.\"},\"disburse(uint256)\":{\"notice\":\"Called by the receiver. Only if the receiver is happy with the shipment, the courier gets paid.\"},\"dispute(uint256,address)\":{\"notice\":\"Receiver or courier is unhappy, can file a dispute\"},\"isPayable()\":{\"notice\":\"Checks if the resolver can be sent ETH.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes multiple attestations and verifies whether they are valid.\"},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes revocation of multiple attestation and verifies they can be revoked.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation revocation and verifies if it can be revoked.\"},\"settle(uint256)\":{\"notice\":\"If nobody did anything after the deadline, then the settlement can be made Anyone can call this. In the future, you can incentivize by giving a cut to the caller\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"},\"withdraw()\":{\"notice\":\"Withdraw balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DeDe.sol\":\"DeDe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5a192f0bcee5372b69b0bb746c26317a2691dd10bfa52adbd08a9b723a55036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x772b1ebcf3e5c93fecb53762e11bbdae75fcb667deea4ac21134fccfe78326e4\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5883c852730b00d73b10475f3b382afce8f30b89f337078ec03a66c463e048a8\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xb74b64e20b90b35004750d2c78ceb114a304975d22d71bd9a2a9de0d483f0395\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\nimport { AccessDenied, InvalidEAS, InvalidLength, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @title SchemaResolver\\n/// @notice The base schema resolver contract.\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global EAS contract.\\n    IEAS internal immutable _eas;\\n\\n    /// @dev Creates a new resolver.\\n    /// @param eas The address of the global EAS contract.\\n    constructor(IEAS eas) Semver(1, 3, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /// @dev Ensures that only the EAS contract can make this call.\\n    modifier onlyEAS() {\\n        _onlyEAS();\\n\\n        _;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev ETH callback.\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and return false in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /// @inheritdoc ISchemaResolver\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n        if (length != values.length) {\\n            revert InvalidLength();\\n        }\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and return false in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice A resolver callback that should be implemented by child contracts.\\n    /// @param attestation The new attestation.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n    ///     both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation is valid.\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n    ///     both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\\n    ///     attestations in the batch.\\n    /// @return Whether the attestation can be revoked.\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /// @dev Ensures that only the EAS contract can make this call.\\n    function _onlyEAS() private view {\\n        if (msg.sender != address(_eas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0533594956d3a7d861a68127825cbde3bc9a89979ece3aa99c3820f4c5a251\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/DeDe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport { SchemaResolver } from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\\\";\\nimport { IEAS, Attestation, AttestationRequest, AttestationRequestData } from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport { NO_EXPIRATION_TIME, EMPTY_UID } from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\nimport { WorldIDEnabled, IWorldID } from \\\"./WorldIDEnabled.sol\\\";\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\n\\nimport { IPUSHCommInterface } from \\\"./interfaces/IPUSHCommInterface.sol\\\";\\nimport { LibPush } from \\\"./helpers/LibPush.sol\\\";\\n\\ncontract DeDe is WorldIDEnabled, SchemaResolver {\\n    using ByteHasher for bytes;\\n\\n    IEAS eas;\\n\\n    uint public settlementDuration;\\n    uint public currentId;\\n    mapping(uint => Shipment) public shipments;\\n    mapping(uint => bool) public pickedUpShipments;\\n    mapping(uint => bool) public fulfilledShipments;\\n    mapping(address => uint) public withdrawableBalance;\\n    uint public deliveryIndex;\\n    IPUSHCommInterface push;\\n\\n    enum ShipmentState {\\n        REQUESTED,\\n        PICKED_UP,\\n        DELIVERED,\\n        DISPUTED,\\n        COMPLETED\\n    }\\n\\n    bytes32 REQUESTED_SCHEMA = 0x649c99bb183684413dba0659c79fe734e35e8fe8c53f48674ff7f39aa1226d66; //TODO\\n    bytes32 public PICKED_UP_SCHEMA; //TODO\\n    bytes32 public DELIVERED_SCHEMA; //TODO\\n    bytes32 public DISPUTED_SCHEMA; //TODO\\n    bytes32 public COMPLETED_SCHEMA; //TODO\\n\\n    function setPickedUpSchema(bytes32 _schema) public {\\n        PICKED_UP_SCHEMA = _schema;\\n    }\\n\\n    function setDeliveredSchema(bytes32 _schema) public {\\n        DELIVERED_SCHEMA = _schema;\\n    }\\n\\n    function setDisputedSchema(bytes32 _schema) public {\\n        DISPUTED_SCHEMA = _schema;\\n    }\\n\\n    function setCompletedSchema(bytes32 _schema) public {\\n        COMPLETED_SCHEMA = _schema;\\n    }\\n\\n    struct Shipment {\\n        uint id;\\n        ShipmentState state;\\n        uint bounty; // Earnings for courier when shipment is done\\n        uint settlementDeadline; // When should the receiver accept/dispute the shipment as complete\\n        // uint stake; // Amount courier staked to make this shipment REMOVED FOR HACKATHON\\n        address courier;\\n        address sender;\\n        address receiver;\\n        // address paidBy;\\n        bool valid;\\n    }\\n    /**\\n     * @param bounty Bounty for the courier\\n     * @param packageValue Value of the package\\n     * @param sender Address of the sender\\n     * @param receiver Address of the receiver\\n     */\\n    struct ShipmentRequestedParams {\\n        uint bounty;\\n        uint deliveryIndex;\\n        // uint packageValue;\\n        // address sender;\\n        // address receiver;\\n    }\\n\\n    struct ShipmentPickedUpParams {\\n        uint shipmentId;\\n        address courier;\\n    }\\n\\n    struct ShipmentDeliveredParams {\\n        uint shipmentId;\\n        address courier;\\n    }\\n\\n    struct ShipmentCompletedParams {\\n        uint shipmentId;\\n        address disputer;\\n    }\\n\\n    event ShipmentRequested(uint shipmentId, address sender, address receiver, uint deadline, uint bounty);\\n    event ShipmentPickedUp(uint shipmentId, address courier);\\n    event ShipmentDelivered(uint shipmentId, address courier);\\n    event ShipmentCompleted(uint shipmentId, address courier);\\n\\n    /**\\n     * @dev Constructor\\n     * @param _settlementDuration How long the courier has to complete the shipment\\n     * @param _eas Address of the EAS contract\\n     */\\n    constructor(\\n        uint _settlementDuration,\\n        IEAS _eas,\\n        IWorldID _worldId,\\n        IPUSHCommInterface _push\\n    ) payable SchemaResolver(_eas) WorldIDEnabled(_worldId) {\\n        settlementDuration = _settlementDuration;\\n        eas = _eas;\\n        push = _push;\\n    }\\n\\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal override returns (bool) {\\n        if (attestation.schema == PICKED_UP_SCHEMA) {\\n            ShipmentPickedUpParams memory params = abi.decode(attestation.data, (ShipmentPickedUpParams));\\n            pickUpShipment(params.shipmentId);\\n        } else if (attestation.schema == DELIVERED_SCHEMA) {\\n            ShipmentDeliveredParams memory params = abi.decode(attestation.data, (ShipmentDeliveredParams));\\n            deliverShipment(params.shipmentId);\\n        } else if (attestation.schema == DISPUTED_SCHEMA) {\\n            // TODO\\n        } else if (attestation.schema == COMPLETED_SCHEMA) {\\n            ShipmentCompletedParams memory params = abi.decode(attestation.data, (ShipmentCompletedParams));\\n            completeShipment(params.shipmentId);\\n        }\\n\\n        return true;\\n    }\\n\\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Request a shipment. Direct Contract Attestation\\n     * @param receiver receiver of the shipment\\n     */\\n    function requestShipment(address receiver) public payable returns (bytes32) {\\n        // require(msg.value >= request.bounty, \\\"Shipment cost insufficient\\\");\\n        // uint stakeAmount = request.packageValue / 2;\\n\\n        ShipmentRequestedParams memory request = ShipmentRequestedParams({\\n            bounty: msg.value,\\n            deliveryIndex: currentId\\n        });\\n\\n        Shipment memory shipment = Shipment({\\n            id: currentId,\\n            state: ShipmentState.REQUESTED,\\n            bounty: request.bounty,\\n            settlementDeadline: block.timestamp + settlementDuration,\\n            // stake: stakeAmount,\\n            courier: address(0),\\n            sender: msg.sender,\\n            receiver: receiver,\\n            // paidBy: msg.sender,\\n            valid: true\\n        });\\n        shipments[currentId] = shipment;\\n\\n        currentId++;\\n\\n        emit ShipmentRequested(currentId, msg.sender, receiver, request.bounty, block.timestamp + settlementDuration);\\n\\n        bytes32 uid = eas.attest(\\n            AttestationRequest({\\n                schema: REQUESTED_SCHEMA,\\n                data: AttestationRequestData({\\n                    recipient: receiver, // No recipient\\n                    expirationTime: NO_EXPIRATION_TIME, // No expiration time\\n                    revocable: true,\\n                    refUID: EMPTY_UID, // No references UI\\n                    data: abi.encode(request), // Encode request\\n                    value: 0 // No value/ETH\\n                })\\n            })\\n        );\\n\\n        // If Push address is set, send notification\\n        if (address(push) != address(0)) {\\n            LibPush.sendDeliveryRequestedNotification(push, request.bounty);\\n        }\\n\\n        return uid;\\n    }\\n\\n    /**\\n     * @dev Pickup a shipment. User must stake ETH equal to package value to start the shipment\\n     * @param _shipmentId ID of the shipment\\n     */\\n\\n    // TODO: This should be a hook to the EAS contract\\n    function pickUpShipment(uint _shipmentId) internal {\\n        Shipment storage shipment = shipments[_shipmentId];\\n        require(shipment.state == ShipmentState.REQUESTED, \\\"Shipment has already been picked up\\\");\\n        // require(msg.value >= shipment.stake, \\\"Stake amount insufficient\\\"); REMOVED STAKE FOR HACKATHON\\n\\n        require(shipment.valid == true, \\\"Shipment is not valid\\\");\\n        require(shipment.settlementDeadline > block.timestamp, \\\"Shipment has expired\\\");\\n\\n        pickedUpShipments[_shipmentId] = true;\\n        shipment.courier = msg.sender;\\n        // shipment.stake = msg.value;\\n        shipment.state = ShipmentState.PICKED_UP;\\n        emit ShipmentPickedUp(_shipmentId, msg.sender);\\n    }\\n\\n    /** TODO: Add attestations */\\n    /**\\n     * @dev Deliver a shipment. Only the courier can call this. Resolved by EAS.\\n     * @param _shipmentId ID of the shipment\\n     */\\n    function deliverShipment(uint _shipmentId) public payable {\\n        Shipment storage shipment = shipments[_shipmentId];\\n        require(shipment.valid == true, \\\"Shipment is not valid\\\");\\n        require(shipment.state == ShipmentState.PICKED_UP, \\\"Shipment has already been picked up\\\");\\n        require(shipment.settlementDeadline > block.number, \\\"Shipment has expired\\\");\\n        require(shipment.courier == msg.sender, \\\"Sender is not the courier\\\");\\n\\n        fulfilledShipments[_shipmentId] = true;\\n        address payable courier = payable(shipment.courier);\\n\\n        // Return stake to courier\\n        shipment.state = ShipmentState.DELIVERED;\\n\\n        emit ShipmentDelivered(_shipmentId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Complete a shipment. Only the reciever can call this. Resolved by EAS.\\n     * @param _shipmentId ID of the shipment\\n     */\\n    function completeShipment(uint _shipmentId) public payable {\\n        Shipment storage shipment = shipments[_shipmentId];\\n        require(shipment.valid == true, \\\"Shipment is not valid\\\");\\n        require(shipment.state == ShipmentState.DELIVERED, \\\"Shipment is not yet delivered\\\");\\n        require(shipment.settlementDeadline > block.number, \\\"Shipment has expired\\\");\\n        require(shipment.receiver == msg.sender, \\\"Sender is not the receiver\\\");\\n\\n        fulfilledShipments[_shipmentId] = true;\\n        address payable courier = payable(shipment.courier);\\n\\n        shipment.state = ShipmentState.DELIVERED;\\n\\n        // Return stake to courier\\n        // courier.transfer(shipment.stake);\\n        emit ShipmentCompleted(_shipmentId, msg.sender);\\n    }\\n\\n    /**\\n     * Receiver or courier is unhappy, can file a dispute\\n     */\\n    function dispute(uint _shipmentId, address disputer) public {\\n        // TODO\\n        // Would need to call to an insurance contract and settle things that way\\n    }\\n\\n    /**\\n     * Called by the receiver. Only if the receiver is happy with the shipment, the courier gets paid.\\n     */\\n    function disburse(uint _shipmentId) public {\\n        require(pickedUpShipments[_shipmentId] == true, \\\"Shipment is not picked up\\\");\\n        require(fulfilledShipments[_shipmentId] == true, \\\"Shipment is not fulfilled\\\");\\n\\n        Shipment memory shipment = shipments[_shipmentId];\\n        require(shipment.valid == true, \\\"Shipment is not valid\\\");\\n        require(shipment.receiver == msg.sender, \\\"Caller is not the receiver\\\");\\n\\n        // Set it to not valid anymore since its done\\n        shipment.valid = false;\\n        shipments[_shipmentId] = shipment;\\n        withdrawableBalance[shipment.courier] += shipment.bounty;\\n    }\\n\\n    /**\\n     * If nobody did anything after the deadline, then the settlement can be made\\n     * Anyone can call this. In the future, you can incentivize by giving a cut to the caller\\n     */\\n    function settle(uint _shipmentId) public {\\n        Shipment memory shipment = shipments[_shipmentId];\\n        require(shipment.valid == true, \\\"Shipment is not valid\\\");\\n        require(shipment.settlementDeadline <= block.number, \\\"Shipment has not expired\\\");\\n\\n        shipment.valid = false;\\n        shipments[_shipmentId] = shipment;\\n\\n        // If fulfilled but receiver didn't disburse, the withdrawable balance opens for the courier\\n        if (fulfilledShipments[_shipmentId]) {\\n            withdrawableBalance[shipment.courier] += shipment.bounty;\\n        }\\n\\n        // If picked up but not fulfilled, the withdrawable balance opens for the requester\\n        // The receiver also earns the stake as a compensation\\n        if (pickedUpShipments[_shipmentId] && !fulfilledShipments[_shipmentId]) {\\n            withdrawableBalance[shipment.sender] += shipment.bounty;\\n        }\\n    }\\n\\n    /**\\n     * Withdraw balance\\n     */\\n    function withdraw() public {\\n        require(withdrawableBalance[msg.sender] > 0, \\\"No withdrawable balance\\\");\\n        uint amount = withdrawableBalance[msg.sender];\\n        withdrawableBalance[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x12d330569c6f3e01f239558af6276666d6bdaec669dbf13afe9216cbcbc6e19d\",\"license\":\"UNLICENSED\"},\"contracts/WorldIDEnabled.sol\":{\"content\":\"// Import the World ID contract\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"./interfaces/IWorldID.sol\\\";\\n\\ncontract WorldIDEnabled {\\n    using ByteHasher for bytes;\\n\\n    ///////////////////////////////////////////////////////////////////////////////\\n    ///                                  ERRORS                                ///\\n    //////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Thrown when attempting to reuse a nullifier\\n    error InvalidNullifier();\\n\\n    /// @notice Event emitted when a user is verified with World ID\\n    event UserVerifiedWithWorldCoin(address indexed user);\\n\\n    /// @dev The World ID instance that will be used for verifying proofs\\n    IWorldID internal immutable worldId;\\n\\n    /// @dev The contract's external nullifier hash\\n    uint256 internal immutable externalNullifier;\\n\\n    /// @dev The World ID group ID (always 1)\\n    uint256 internal immutable groupId = 1;\\n\\n    string APP_ID = \\\"app_staging_b5616153c4f82656001f570e30600b7e\\\";\\n    string ACTION_ID = \\\"verify-unique-human-and-get-50-points\\\";\\n\\n    /// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\\n    mapping(uint256 => bool) internal nullifierHashes;\\n\\n    /// @param _worldId The WorldID instance that will verify the proofs\\n\\n    constructor(IWorldID _worldId) {\\n        worldId = _worldId;\\n        externalNullifier = abi.encodePacked(abi.encodePacked(APP_ID).hashToField(), ACTION_ID).hashToField();\\n    }\\n\\n    /// @param signal An arbitrary input from the user, usually the user's wallet address (check README for further details)\\n    /// @param root The root of the Merkle tree (returned by the JS widget).\\n    /// @param nullifierHash The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\\n    /// @param proof The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\\n    /// @dev Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\\n    function verifyWithWorldCoin(\\n        address signal,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) public {\\n        // First, we make sure this person hasn't done this before\\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n\\n        // We now verify the provided proof is valid and the user is verified by World ID\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(signal).hashToField(),\\n            nullifierHash,\\n            externalNullifier,\\n            proof\\n        );\\n\\n        // We now record the user has done this, so they can't do it again (proof of uniqueness)\\n        nullifierHashes[nullifierHash] = true;\\n\\n        emit UserVerifiedWithWorldCoin(msg.sender); // This adds 50 DeDe Points to the user's account\\n\\n        // Finally, execute your logic here, for example issue a token, NFT, etc...\\n        // Make sure to emit some kind of event afterwards!\\n    }\\n}\\n\",\"keccak256\":\"0x8ce1007fe51a448495a3f1467e69e318c3e7d25fdf29aeb4ea2d76a746fbd57b\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x225f0627ac21d07df35533f605936035d74aa0f05a632cb8d150d3af50408cd0\",\"license\":\"MIT\"},\"contracts/helpers/LibPush.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IPUSHCommInterface } from \\\"../interfaces/IPUSHCommInterface.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibPush {\\n    function sendDeliveryRequestedNotification(IPUSHCommInterface push, uint bountyAmount) internal {\\n        push.sendNotification(\\n            0x888880D76B08Ee18A853bfA503f83ac558b108dc, // from channel - recommended to set channel via dApp and put it's value -> then once contract is deployed, go back and add the contract address as delegate for your channel\\n            address(this), // BROADCAST TO EVERYONE to recipient, put address(this) in case you want Broadcast or Subset. For targeted put the address to which you want to send\\n            bytes(\\n                string(\\n                    // We are passing identity here: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                    abi.encodePacked(\\n                        \\\"0\\\", // this represents minimal identity, learn more: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                        \\\"+\\\", // segregator\\n                        \\\"1\\\", // define notification type:  https://push.org/docs/notifications/build/types-of-notification (1, 3 or 4) = (Broadcast, targeted or subset)\\n                        \\\"+\\\", // segregator\\n                        \\\"New Delivery Request!\\\", // this is notificaiton title\\n                        \\\"+\\\", // segregator\\n                        string.concat(\\\"Bounty: \\\", Strings.toString(bountyAmount), \\\"ETH\\\") // notification body\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function sendDeliveryPickedUpNotification(IPUSHCommInterface push, address sender) internal {\\n        push.sendNotification(\\n            0x888880D76B08Ee18A853bfA503f83ac558b108dc, // from channel - recommended to set channel via dApp and put it's value -> then once contract is deployed, go back and add the contract address as delegate for your channel\\n            sender, // BROADCAST TO delivery sender. to recipient, put address(this) in case you want Broadcast or Subset. For targeted put the address to which you want to send\\n            bytes(\\n                string(\\n                    // We are passing identity here: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                    abi.encodePacked(\\n                        \\\"0\\\", // this represents minimal identity, learn more: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                        \\\"+\\\", // segregator\\n                        \\\"3\\\", // define notification type:  https://push.org/docs/notifications/build/types-of-notification (1, 3 or 4) = (Broadcast, targeted or subset)\\n                        \\\"+\\\", // segregator\\n                        \\\"Delivery Picked Up!\\\", // this is notificaiton title\\n                        \\\"+\\\", // segregator\\n                        \\\"You delivery was picked up\\\" // notification body\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function sendDeliveryDroppedOffNotification(IPUSHCommInterface push, address sender) internal {\\n        push.sendNotification(\\n            0x888880D76B08Ee18A853bfA503f83ac558b108dc, // from channel - recommended to set channel via dApp and put it's value -> then once contract is deployed, go back and add the contract address as delegate for your channel\\n            sender, // BROADCAST TO delivery sender. to recipient, put address(this) in case you want Broadcast or Subset. For targeted put the address to which you want to send\\n            bytes(\\n                string(\\n                    // We are passing identity here: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                    abi.encodePacked(\\n                        \\\"0\\\", // this represents minimal identity, learn more: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                        \\\"+\\\", // segregator\\n                        \\\"3\\\", // define notification type:  https://push.org/docs/notifications/build/types-of-notification (1, 3 or 4) = (Broadcast, targeted or subset)\\n                        \\\"+\\\", // segregator\\n                        \\\"Package at Destination!\\\", // this is notificaiton title\\n                        \\\"+\\\", // segregator\\n                        \\\"You delivery was dropped off at your destination!\\\" // notification body\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function sendDeliveryConfirmedNotification(IPUSHCommInterface push, address courier, uint bountyAmount) internal {\\n        push.sendNotification(\\n            0x888880D76B08Ee18A853bfA503f83ac558b108dc, // from channel - recommended to set channel via dApp and put it's value -> then once contract is deployed, go back and add the contract address as delegate for your channel\\n            courier, // BROADCAST TO delivery courier. to recipient, put address(this) in case you want Broadcast or Subset. For targeted put the address to which you want to send\\n            bytes(\\n                string(\\n                    // We are passing identity here: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                    abi.encodePacked(\\n                        \\\"0\\\", // this represents minimal identity, learn more: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\\n                        \\\"+\\\", // segregator\\n                        \\\"3\\\", // define notification type:  https://push.org/docs/notifications/build/types-of-notification (1, 3 or 4) = (Broadcast, targeted or subset)\\n                        \\\"+\\\", // segregator\\n                        \\\"Delivery Confirmed!\\\", // this is notificaiton title\\n                        \\\"+\\\", // segregator\\n                        string.concat(Strings.toString(bountyAmount), \\\" has been released to your account!\\\") // notification body\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7908148d6a93a0cea40cbff1aece4806b7175939374b664ea821f28915ffbd4e\",\"license\":\"MIT\"},\"contracts/interfaces/IPUSHCommInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IPUSHCommInterface {\\n    function sendNotification(address _channel, address _recipient, bytes calldata _identity) external;\\n}\\n\",\"keccak256\":\"0x5a7367d4e16d179bfda7e5e516871e68ce545ce63ab5b11afbdafcd9ee021dbc\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWorldID {\\n\\t/// @notice Reverts if the zero-knowledge proof is invalid.\\n\\t/// @param root The of the Merkle tree\\n\\t/// @param groupId The id of the Semaphore group\\n\\t/// @param signalHash A keccak256 hash of the Semaphore signal\\n\\t/// @param nullifierHash The nullifier hash\\n\\t/// @param externalNullifierHash A keccak256 hash of the external nullifier\\n\\t/// @param proof The zero-knowledge proof\\n\\t/// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n\\tfunction verifyProof(\\n\\t\\tuint256 root,\\n\\t\\tuint256 groupId,\\n\\t\\tuint256 signalHash,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256 externalNullifierHash,\\n\\t\\tuint256[8] calldata proof\\n\\t) external view;\\n}\",\"keccak256\":\"0x36f5a08a9f832575e2f555b8cc26b787cd135db3f32f45b02e31fc693ddf333c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c80638df82800116100f7578063d74c934c11610095578063e60c350511610064578063e60c350514610532578063efdfb14014610545578063f15456b51461055b578063fc8258b61461056e57600080fd5b8063d74c934c146104e3578063e00dd161146104f6578063e0d516641461050c578063e49617e11461051f57600080fd5b8063bd77ac2c116100d1578063bd77ac2c14610483578063ca65e1cb146104a3578063cac4f497146104b9578063ce46e046146104cf57600080fd5b80638df828001461043157806391db0b7e14610451578063a765fbea1461046457600080fd5b806357692213116101645780637943a4e71161013e5780637943a4e7146103ae5780637dad1fbc146103de578063818fd238146103fe57806388e5b2d91461041e57600080fd5b80635769221314610362578063599172b1146103785780636441e96d1461039857600080fd5b80633ccfd60b116101a05780633ccfd60b146102f55780634e81d59a1461030a578063527087471461032057806354fd4d501461034057600080fd5b806302b62938146101eb5780631a9dcb351461022b5780632ac08a931461026b57600080fd5b366101e657604051631574f9f360e01b815260040160405180910390fd5b005b600080fd5b3480156101f757600080fd5b50610218610206366004611a22565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561023757600080fd5b5061025b610246366004611a44565b60086020526000908152604090205460ff1681565b6040519015158152602001610222565b34801561027757600080fd5b506102e1610286366004611a44565b60066020819052600091825260409091208054600182015460028301546003840154600485015460058601549590960154939560ff93841695929491936001600160a01b039182169382169291821691600160a01b90041688565b604051610222989796959493929190611a73565b34801561030157600080fd5b506101e461058e565b34801561031657600080fd5b50610218600d5481565b34801561032c57600080fd5b506101e461033b366004611a44565b600f55565b34801561034c57600080fd5b50610355610630565b6040516102229190611b2c565b34801561036e57600080fd5b5061021860045481565b34801561038457600080fd5b506101e4610393366004611a44565b600d55565b3480156103a457600080fd5b50610218600f5481565b3480156103ba57600080fd5b5061025b6103c9366004611a44565b60076020526000908152604090205460ff1681565b3480156103ea57600080fd5b506101e46103f9366004611a44565b600e55565b34801561040a57600080fd5b506101e4610419366004611a44565b601055565b61025b61042c366004611b8b565b6106d3565b34801561043d57600080fd5b506101e461044c366004611a44565b6107a2565b61025b61045f366004611b8b565b610a4f565b34801561047057600080fd5b506101e461047f366004611bf7565b5050565b34801561048f57600080fd5b506101e461049e366004611a44565b610b0e565b3480156104af57600080fd5b5061021860105481565b3480156104c557600080fd5b50610218600a5481565b3480156104db57600080fd5b50600061025b565b6102186104f1366004611a22565b610dfa565b34801561050257600080fd5b5061021860055481565b6101e461051a366004611a44565b6110c1565b61025b61052d366004611c23565b611233565b61025b610540366004611c23565b61124f565b34801561055157600080fd5b50610218600e5481565b6101e4610569366004611a44565b611263565b34801561057a57600080fd5b506101e4610589366004611c5f565b6113fd565b336000908152600960205260409020546105ef5760405162461bcd60e51b815260206004820152601760248201527f4e6f20776974686472617761626c652062616c616e636500000000000000000060448201526064015b60405180910390fd5b33600081815260096020526040808220805490839055905190929183156108fc02918491818181858888f1935050505015801561047f573d6000803e3d6000fd5b606061065b7f00000000000000000000000000000000000000000000000000000000000000006115ae565b6106847f00000000000000000000000000000000000000000000000000000000000000006115ae565b6106ad7f00000000000000000000000000000000000000000000000000000000000000006115ae565b6040516020016106bf93929190611cad565b604051602081830303815290604052905090565b60006106dd611641565b838281146106fe5760405163251f56a160e21b815260040160405180910390fd5b3460005b8281101561079257600086868381811061071e5761071e611d07565b905060200201359050828111156107485760405163044044a560e21b815260040160405180910390fd5b61077589898481811061075d5761075d611d07565b905060200281019061076f9190611d1d565b8261168c565b61078657600094505050505061079a565b90910390600101610702565b506001925050505b949350505050565b600081815260066020908152604080832081516101008101909252805482526001810154919290919083019060ff1660048111156107e2576107e2611a5d565b60048111156107f3576107f3611a5d565b8152600282015460208201526003820154604082015260048201546001600160a01b03908116606083015260058301548116608083015260069092015491821660a0820152600160a01b90910460ff16151560c09091015260e08101519091506001901515146108755760405162461bcd60e51b81526004016105e690611d3e565b43816060015111156108c95760405162461bcd60e51b815260206004820152601860248201527f536869706d656e7420686173206e6f742065787069726564000000000000000060448201526064016105e6565b600060e082018190528281526006602090815260409091208251815590820151600182810180548594939260ff199091169083600481111561090d5761090d611a5d565b021790555060408281015160028301556060830151600383015560808301516004830180546001600160a01b039283166001600160a01b03199182161790915560a08501516005850180549184169190921617905560c08401516006909301805460e0909501511515600160a01b026001600160a81b0319909516939091169290921792909217905560008381526008602052205460ff16156109e25760408082015160808301516001600160a01b0316600090815260096020529182208054919290916109dc908490611d83565b90915550505b60008281526007602052604090205460ff168015610a0f575060008281526008602052604090205460ff16155b1561047f5760408082015160a08301516001600160a01b031660009081526009602052918220805491929091610a46908490611d83565b90915550505050565b6000610a59611641565b83828114610a7a5760405163251f56a160e21b815260040160405180910390fd5b3460005b82811015610792576000868683818110610a9a57610a9a611d07565b90506020020135905082811115610ac45760405163044044a560e21b815260040160405180910390fd5b610af1898984818110610ad957610ad9611d07565b9050602002810190610aeb9190611d1d565b82611695565b610b0257600094505050505061079a565b90910390600101610a7e565b60008181526007602052604090205460ff161515600114610b715760405162461bcd60e51b815260206004820152601960248201527f536869706d656e74206973206e6f74207069636b65642075700000000000000060448201526064016105e6565b60008181526008602052604090205460ff161515600114610bd45760405162461bcd60e51b815260206004820152601960248201527f536869706d656e74206973206e6f742066756c66696c6c65640000000000000060448201526064016105e6565b600081815260066020908152604080832081516101008101909252805482526001810154919290919083019060ff166004811115610c1457610c14611a5d565b6004811115610c2557610c25611a5d565b8152600282015460208201526003820154604082015260048201546001600160a01b03908116606083015260058301548116608083015260069092015491821660a0820152600160a01b90910460ff16151560c09091015260e0810151909150600190151514610ca75760405162461bcd60e51b81526004016105e690611d3e565b60c08101516001600160a01b03163314610d035760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520726563656976657200000000000060448201526064016105e6565b600060e082018190528281526006602090815260409091208251815590820151600182810180548594939260ff1990911690836004811115610d4757610d47611a5d565b02179055506040828101516002830155606083015160038301556080808401516004840180546001600160a01b039283166001600160a01b03199182161790915560a08601516005860180549184169190921617905560c08501516006909401805460e0909601511515600160a01b026001600160a81b03199096169482169490941794909417909255838101519184015190921660009081526009602052918220805491929091610a46908490611d83565b604080518082018252348152600554602080830182905283516101008101909452908352600092839181018281526020018360000151815260200160045442610e439190611d83565b815260006020808301829052336040808501919091526001600160a01b03891660608501526001608090940184905260055483526006825290912083518155908301518183018054949550859492939192909160ff1990911690836004811115610eaf57610eaf611a5d565b0217905550604082015160028201556060820151600382015560808201516004820180546001600160a01b039283166001600160a01b03199182161790915560a084015160058085018054928516929093169190911790915560c08401516006909301805460e0909501511515600160a01b026001600160a81b03199095169390921692909217929092179091558054906000610f4b83611d96565b91905055507f22e37630b11fea152d89ae822dbde78b0feaa2589d1d7e1e2a1e93db6b25f1886005543386856000015160045442610f899190611d83565b604080519586526001600160a01b03948516602087015292909316918401919091526060830152608082015260a00160405180910390a1600354604080518082018252600c548152815160c0810183526001600160a01b03888116825260006020808401829052600184870152606080850183905286518a51818401528a8301518189015287518082038901815291018752608085015260a08401829052840192909252925163f17325e760e01b81529093929092169163f17325e79161105291600401611daf565b6020604051808303816000875af1158015611071573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110959190611e32565b600b549091506001600160a01b03161561079a57600b54835161079a916001600160a01b031690611760565b600081815260066020819052604090912090810154600160a01b900460ff1615156001146111015760405162461bcd60e51b81526004016105e690611d3e565b60018082015460ff16600481111561111b5761111b611a5d565b146111385760405162461bcd60e51b81526004016105e690611e4b565b4381600301541161115b5760405162461bcd60e51b81526004016105e690611e8e565b60048101546001600160a01b031633146111b75760405162461bcd60e51b815260206004820152601960248201527f53656e646572206973206e6f742074686520636f75726965720000000000000060448201526064016105e6565b600082815260086020908152604091829020805460ff199081166001908117909255600485015491850180549091166002179055825185815233928101929092526001600160a01b0316917fbf7b34fcfb0fa3cde7bd3ce969eaf623d71024a06634fb384b78c1cac6c7eaac91015b60405180910390a1505050565b600061123d611641565b611247823461168c565b90505b919050565b6000611259611641565b6112478234611695565b600081815260066020819052604090912090810154600160a01b900460ff1615156001146112a35760405162461bcd60e51b81526004016105e690611d3e565b6002600182015460ff1660048111156112be576112be611a5d565b1461130b5760405162461bcd60e51b815260206004820152601d60248201527f536869706d656e74206973206e6f74207965742064656c69766572656400000060448201526064016105e6565b4381600301541161132e5760405162461bcd60e51b81526004016105e690611e8e565b60068101546001600160a01b0316331461138a5760405162461bcd60e51b815260206004820152601a60248201527f53656e646572206973206e6f742074686520726563656976657200000000000060448201526064016105e6565b600082815260086020908152604091829020805460ff199081166001908117909255600485015491850180549091166002179055825185815233928101929092526001600160a01b0316917f537363b9a51fea93bd842ffdb00c866c81120a6ce2f76037c732ea4d6592b7629101611226565b60008281526002602052604090205460ff161561142d57604051632ec8265960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006114be886040516020016114aa919060609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052611579565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161150296959493929190611ebc565b60006040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050600083815260026020526040808220805460ff19166001179055513392507f769880fbb2d5d9735427e77a7f6109a5f5887d06ccaacc6af7b937b74775736b9190a250505050565b600060088260405160200161158e9190611ef4565b60408051601f198184030181529190528051602090910120901c92915050565b606060006115bb8361181e565b600101905060008167ffffffffffffffff8111156115db576115db611f06565b6040519080825280601f01601f191660200182016040528015611605576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461160f57509392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461168a57604051634ca8886760e01b815260040160405180910390fd5b565b60015b92915050565b6000600d548360200135036116d65760006116b4610120850185611f1c565b8101906116c19190611fc8565b90506116d081600001516118f6565b50611757565b600e5483602001350361170f5760006116f3610120850185611f1c565b8101906117009190611fc8565b90506116d081600001516110c1565b600f5460208401351461175757601054836020013503611757576000611739610120850185611f1c565b8101906117469190611fc8565b90506117558160000151611263565b505b50600192915050565b816001600160a01b031663ba3d69d773888880d76b08ee18a853bfa503f83ac558b108dc3061178e856115ae565b60405160200161179e9190611fe4565b60408051601f19818403018152908290526117bb91602001612021565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016117e89392919061208a565b600060405180830381600087803b15801561180257600080fd5b505af1158015611816573d6000803e3d6000fd5b505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061185d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611889576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106118a757662386f26fc10000830492506010015b6305f5e10083106118bf576305f5e100830492506008015b61271083106118d357612710830492506004015b606483106118e5576064830492506002015b600a831061168f5760010192915050565b600081815260066020526040812090600182015460ff16600481111561191e5761191e611a5d565b1461193b5760405162461bcd60e51b81526004016105e690611e4b565b6006810154600160a01b900460ff16151560011461196b5760405162461bcd60e51b81526004016105e690611d3e565b4281600301541161198e5760405162461bcd60e51b81526004016105e690611e8e565b6000828152600760205260409020805460ff1990811660019081179092556004830180546001600160a01b03191633179055828201805490911682800217905550604080518381523360208201527f07ad9f5eac765497cb94cdac99aa0dc0d7cc27c93fb54b1c02a3d48adbb13139910160405180910390a15050565b80356001600160a01b038116811461124a57600080fd5b600060208284031215611a3457600080fd5b611a3d82611a0b565b9392505050565b600060208284031215611a5657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b888152610100810160058910611a9957634e487b7160e01b600052602160045260246000fd5b6020820198909852604081019690965260608601949094526001600160a01b03928316608086015290821660a08501521660c0830152151560e090910152919050565b60005b83811015611af7578181015183820152602001611adf565b50506000910152565b60008151808452611b18816020860160208601611adc565b601f01601f19169290920160200192915050565b602081526000611a3d6020830184611b00565b60008083601f840112611b5157600080fd5b50813567ffffffffffffffff811115611b6957600080fd5b6020830191508360208260051b8501011115611b8457600080fd5b9250929050565b60008060008060408587031215611ba157600080fd5b843567ffffffffffffffff80821115611bb957600080fd5b611bc588838901611b3f565b90965094506020870135915080821115611bde57600080fd5b50611beb87828801611b3f565b95989497509550505050565b60008060408385031215611c0a57600080fd5b82359150611c1a60208401611a0b565b90509250929050565b600060208284031215611c3557600080fd5b813567ffffffffffffffff811115611c4c57600080fd5b82016101408185031215611a3d57600080fd5b600080600080610160808688031215611c7757600080fd5b611c8086611a0b565b94506020860135935060408601359250868187011115611c9f57600080fd5b509295919450926060019150565b60008451611cbf818460208901611adc565b8083019050601760f91b8082528551611cdf816001850160208a01611adc565b60019201918201528351611cfa816002840160208801611adc565b0160020195945050505050565b634e487b7160e01b600052603260045260246000fd5b6000823561013e19833603018112611d3457600080fd5b9190910192915050565b60208082526015908201527414da1a5c1b595b9d081a5cc81b9bdd081d985b1a59605a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561168f5761168f611d6d565b600060018201611da857611da8611d6d565b5060010190565b60208152815160208201526000602083015160408084015260018060a01b03815116606084015267ffffffffffffffff60208201511660808401526040810151151560a0840152606081015160c0840152608081015160c060e0850152611e1a610120850182611b00565b905060a0820151610100850152809250505092915050565b600060208284031215611e4457600080fd5b5051919050565b60208082526023908201527f536869706d656e742068617320616c7265616479206265656e207069636b656460408201526202075760ec1b606082015260800190565b60208082526014908201527314da1a5c1b595b9d081a185cc8195e1c1a5c995960621b604082015260600190565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a0840137979650505050505050565b60008251611d34818460208701611adc565b634e487b7160e01b600052604160045260246000fd5b6000808335601e19843603018112611f3357600080fd5b83018035915067ffffffffffffffff821115611f4e57600080fd5b602001915036819003821315611b8457600080fd5b600060408284031215611f7557600080fd5b6040516040810181811067ffffffffffffffff82111715611fa657634e487b7160e01b600052604160045260246000fd5b60405282358152905080611fbc60208401611a0b565b60208201525092915050565b600060408284031215611fda57600080fd5b611a3d8383611f63565b6702137bab73a3c9d160c51b815260008251612007816008850160208701611adc565b6208aa8960eb1b6008939091019283015250600b01919050565b600360fc1b81526000602b60f81b806001840152603160f81b6002840152806003840152744e65772044656c697665727920526571756573742160581b600484015280601984015250825161207d81601a850160208701611adc565b91909101601a0192915050565b6001600160a01b038481168252831660208201526060604082018190526000906120b690830184611b00565b9594505050505056fea264697066735822122004e8aaa0dc2bce67f15772c6d1da039b5ddb34ef9a4c26948bb0178b351f650864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The new attestation."
        },
        "returns": {
          "_0": "Whether the attestation is valid."
        }
      },
      "completeShipment(uint256)": {
        "details": "Complete a shipment. Only the reciever can call this. Resolved by EAS.",
        "params": {
          "_shipmentId": "ID of the shipment"
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "_eas": "Address of the EAS contract",
          "_settlementDuration": "How long the courier has to complete the shipment"
        }
      },
      "deliverShipment(uint256)": {
        "details": "Deliver a shipment. Only the courier can call this. Resolved by EAS.",
        "params": {
          "_shipmentId": "ID of the shipment"
        }
      },
      "isPayable()": {
        "returns": {
          "_0": "Whether the resolver supports ETH transfers."
        }
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The new attestations.",
          "values": "Explicit ETH amounts which were sent with each attestation."
        },
        "returns": {
          "_0": "Whether all the attestations are valid."
        }
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "params": {
          "attestations": "The existing attestations to be revoked.",
          "values": "Explicit ETH amounts which were sent with each revocation."
        },
        "returns": {
          "_0": "Whether the attestations can be revoked."
        }
      },
      "requestShipment(address)": {
        "details": "Request a shipment. Direct Contract Attestation",
        "params": {
          "receiver": "receiver of the shipment"
        }
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The existing attestation to be revoked."
        },
        "returns": {
          "_0": "Whether the attestation can be revoked."
        }
      },
      "verifyWithWorldCoin(address,uint256,uint256,uint256[8])": {
        "details": "Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.",
        "params": {
          "nullifierHash": "The nullifier hash for this proof, preventing double signaling (returned by the JS widget).",
          "proof": "The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).",
          "root": "The root of the Merkle tree (returned by the JS widget).",
          "signal": "An arbitrary input from the user, usually the user's wallet address (check README for further details)"
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidNullifier()": [
        {
          "notice": "Thrown when attempting to reuse a nullifier"
        }
      ]
    },
    "events": {
      "UserVerifiedWithWorldCoin(address)": {
        "notice": "Event emitted when a user is verified with World ID"
      }
    },
    "kind": "user",
    "methods": {
      "attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation and verifies whether it's valid."
      },
      "disburse(uint256)": {
        "notice": "Called by the receiver. Only if the receiver is happy with the shipment, the courier gets paid."
      },
      "dispute(uint256,address)": {
        "notice": "Receiver or courier is unhappy, can file a dispute"
      },
      "isPayable()": {
        "notice": "Checks if the resolver can be sent ETH."
      },
      "multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes multiple attestations and verifies whether they are valid."
      },
      "multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
        "notice": "Processes revocation of multiple attestation and verifies they can be revoked."
      },
      "revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "Processes an attestation revocation and verifies if it can be revoked."
      },
      "settle(uint256)": {
        "notice": "If nobody did anything after the deadline, then the settlement can be made Anyone can call this. In the future, you can incentivize by giving a cut to the caller"
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      },
      "withdraw()": {
        "notice": "Withdraw balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2909,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "APP_ID",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2912,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "ACTION_ID",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2917,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2081,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "eas",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IEAS)356"
      },
      {
        "astId": 2083,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "settlementDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2085,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "currentId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2090,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "shipments",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Shipment)2182_storage)"
      },
      {
        "astId": 2094,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "pickedUpShipments",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2098,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "fulfilledShipments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2102,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "withdrawableBalance",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2104,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "deliveryIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2107,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "push",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IPUSHCommInterface)3187"
      },
      {
        "astId": 2116,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "REQUESTED_SCHEMA",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 2118,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "PICKED_UP_SCHEMA",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 2120,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "DELIVERED_SCHEMA",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 2122,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "DISPUTED_SCHEMA",
        "offset": 0,
        "slot": "15",
        "type": "t_bytes32"
      },
      {
        "astId": 2124,
        "contract": "contracts/DeDe.sol:DeDe",
        "label": "COMPLETED_SCHEMA",
        "offset": 0,
        "slot": "16",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEAS)356": {
        "encoding": "inplace",
        "label": "contract IEAS",
        "numberOfBytes": "20"
      },
      "t_contract(IPUSHCommInterface)3187": {
        "encoding": "inplace",
        "label": "contract IPUSHCommInterface",
        "numberOfBytes": "20"
      },
      "t_enum(ShipmentState)2113": {
        "encoding": "inplace",
        "label": "enum DeDe.ShipmentState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Shipment)2182_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DeDe.Shipment)",
        "numberOfBytes": "32",
        "value": "t_struct(Shipment)2182_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Shipment)2182_storage": {
        "encoding": "inplace",
        "label": "struct DeDe.Shipment",
        "members": [
          {
            "astId": 2166,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2169,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ShipmentState)2113"
          },
          {
            "astId": 2171,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "bounty",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2173,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "settlementDeadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2175,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "courier",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2177,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "sender",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 2179,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "receiver",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2181,
            "contract": "contracts/DeDe.sol:DeDe",
            "label": "valid",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}